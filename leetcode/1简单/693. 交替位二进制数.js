/**
 * @param {number} n
 * @return {boolean}
 */
var hasAlternatingBits1 = function (n) {
  return (
    [
      1, 2, 5, 10, 21, 42, 85, 170, 341, 682, 1365, 2730, 5461, 10922, 21845,
      43690, 87381, 174762, 349525, 699050, 1398101, 2796202, 5592405, 11184810,
      22369621, 44739242, 89478485, 178956970, 357913941, 715827882, 1431655765,
    ].indexOf(n) + 1
  );
};

var hasAlternatingBits = function(n) {
    let yushu
    while (n !== 0) {
        const cur = n % 2;
        if (cur === yushu) {
            return false;
        }
        yushu = cur;
        n = Math.floor(n / 2);
    }
    return true;
};


// 693. 交替位二进制数
// 给定一个正整数，检查它的二进制表示是否总是 0、1 交替出现：换句话说，就是二进制表示中相邻两位的数字永不相同。

// 示例 1：

// 输入：n = 5
// 输出：true
// 解释：5 的二进制表示是：101
// 示例 2：

// 输入：n = 7
// 输出：false
// 解释：7 的二进制表示是：111.
// 示例 3：

// 输入：n = 11
// 输出：false
// 解释：11 的二进制表示是：1011.

// 提示：

// 1 <= n <= 231 - 1
